name: "ci"

on:
    pull_request:
        types: ["opened", "synchronize", "edited", "reopened"]
    push:
        branches:
            - "v[0-9]+.[0-9x]+"
    schedule:
        -   cron: "0 8 * * 1" # At 08:00 on Monday

env:
    php-extensions: "json, intl"
    php-tools: "composer:v2"

jobs:
    coding-standard:
        name: "Coding standard"
        runs-on: "${{ matrix.operating-system }}"

        strategy:
            matrix:
                php-version: ["7.4"]
                operating-system: ["ubuntu-latest"]
            fail-fast: false

        steps:
            -   name: "Checkout"
                uses: "actions/checkout@v2"

            -   name: "Setup PHP cache environment"
                id: "extcache"
                uses: "shivammathur/cache-extensions@v1"
                with:
                    php-version: "${{ matrix.php-version }}"
                    extensions: "${{ env.php-extensions }}"
                    key: "${{ env.php-extensions }}"

            -   name: "Cache PHP extensions"
                uses: "actions/cache@v2"
                with:
                    path: "${{ steps.extcache.outputs.dir }}"
                    key: "${{ steps.extcache.outputs.key }}"
                    restore-keys: "${{ steps.extcache.outputs.key }}"

            -   name: "Install PHP"
                uses: "shivammathur/setup-php@v2"
                with:
                    php-version: "${{ matrix.php-version }}"
                    extensions: "${{ env.php-extensions }}"
                    tools: "${{ env.php-tools }}"

            -   name: "Setup problem matchers for PHP"
                run: 'echo "::add-matcher::${{ runner.tool_cache }}/php.json"'

            -   name: "Get Composer cache directory"
                id: "composercache"
                run: 'echo "::set-output name=dir::$(composer config cache-files-dir)"'

            -   name: "Cache PHP dependencies"
                uses: "actions/cache@v2"
                with:
                    path: "${{ steps.composercache.outputs.dir }}"
                    key: "${{ runner.os }}-composer-${{  hashFiles('**/composer.json', '**/composer.lock') }}"
                    restore-keys: "${{ runner.os }}-composer-"

            -   name: "Validate Composer"
                run: "composer validate"

            -   name: "Install dependencies"
                run: "composer update --no-interaction --no-progress --prefer-dist --prefer-stable"

            -   name: "Cache Codesniffer data"
                uses: "actions/cache@v2"
                with:
                    path: "var/tmp/codesniffer.dat"
                    key: "${{ runner.os }}-codesniffer"
                    restore-keys: "${{ runner.os }}-codesniffer"

            -   name: "Coding Standard"
                run: "make cs ARGS='--report=checkstyle -q | vendor/bin/cs2pr'"

    static-analysis:
        name: "Static analysis"
        runs-on: "${{ matrix.operating-system }}"

        strategy:
            matrix:
                php-version: ["7.4"]
                operating-system: ["ubuntu-latest"]
            fail-fast: false

        steps:
            -   name: "Checkout"
                uses: "actions/checkout@v2"

            -   name: "Setup PHP cache environment"
                id: "extcache"
                uses: "shivammathur/cache-extensions@v1"
                with:
                    php-version: "${{ matrix.php-version }}"
                    extensions: "${{ env.php-extensions }}"
                    key: "${{ env.php-extensions }}"

            -   name: "Cache PHP extensions"
                uses: "actions/cache@v2"
                with:
                    path: "${{ steps.extcache.outputs.dir }}"
                    key: "${{ steps.extcache.outputs.key }}"
                    restore-keys: "${{ steps.extcache.outputs.key }}"

            -   name: "Install PHP"
                uses: "shivammathur/setup-php@v2"
                with:
                    php-version: "${{ matrix.php-version }}"
                    extensions: "${{ env.php-extensions }}"
                    tools: "${{ env.php-tools }}"

            -   name: "Setup problem matchers for PHP"
                run: 'echo "::add-matcher::${{ runner.tool_cache }}/php.json"'

            -   name: "Get Composer cache directory"
                id: "composercache"
                run: 'echo "::set-output name=dir::$(composer config cache-files-dir)"'

            -   name: "Cache PHP dependencies"
                uses: "actions/cache@v2"
                with:
                    path: "${{ steps.composercache.outputs.dir }}"
                    key: "${{ runner.os }}-composer-${{  hashFiles('**/composer.json', '**/composer.lock') }}"
                    restore-keys: "${{ runner.os }}-composer-"

            -   name: "Validate Composer"
                run: "composer validate"

            -   name: "Install dependencies"
                run: "composer update --no-interaction --no-progress --prefer-dist --prefer-stable"

            -   name: "Cache PHPStan data"
                uses: "actions/cache@v2"
                with:
                    path: "var/tmp/PHPStan"
                    key: "${{ runner.os }}-phpstan"
                    restore-keys: "${{ runner.os }}-phpstan"

            -   name: "PHPStan"
                run: "make phpstan"

    tests:
        name: "Tests"
        runs-on: "${{ matrix.operating-system }}"

        strategy:
            matrix:
                php-version: ["7.4"]
                operating-system: ["ubuntu-latest", "macos-latest", "windows-latest"]
                composer-flags: [""]
                include:
                    - php-version: "7.4"
                      operating-system: "ubuntu-latest"
                      composer-flags: "--prefer-lowest"
                    - php-version: "8.0"
                      operating-system: "ubuntu-latest"
                      composer-flags: "--ignore-platform-req=php"
            fail-fast: false

        continue-on-error: "${{ matrix.php-version == '8.0' }}"

        steps:
            -   name: "Checkout"
                uses: "actions/checkout@v2"

            -   name: "Setup PHP cache environment"
                id: "extcache"
                uses: "shivammathur/cache-extensions@v1"
                with:
                    php-version: "${{ matrix.php-version }}"
                    extensions: "${{ env.php-extensions }}"
                    key: "${{ env.php-extensions }}"

            -   name: "Cache PHP extensions"
                uses: "actions/cache@v2"
                with:
                    path: "${{ steps.extcache.outputs.dir }}"
                    key: "${{ steps.extcache.outputs.key }}"
                    restore-keys: "${{ steps.extcache.outputs.key }}"

            -   name: "Install PHP"
                uses: "shivammathur/setup-php@v2"
                with:
                    php-version: "${{ matrix.php-version }}"
                    extensions: "${{ env.php-extensions }}"
                    tools: "${{ env.php-tools }}"

            -   name: "Setup problem matchers for PHP"
                run: 'echo "::add-matcher::${{ runner.tool_cache }}/php.json"'

            -   name: "Get Composer cache directory"
                id: "composercache"
                run: 'echo "::set-output name=dir::$(composer config cache-files-dir)"'

            -   name: "Cache PHP dependencies"
                uses: "actions/cache@v2"
                with:
                    path: "${{ steps.composercache.outputs.dir }}"
                    key: "${{ runner.os }}-composer-${{  hashFiles('**/composer.json', '**/composer.lock') }}"
                    restore-keys: "${{ runner.os }}-composer-"

            -   name: "Install dependencies"
                run: "composer update --no-interaction --no-progress --prefer-dist --prefer-stable ${{ matrix.composer-flags }}"

            -   name: "Setup problem matchers for PHPUnit"
                run: 'echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"'

            -   name: "Tests"
                run: "make tests"

    tests-code-coverage:
        name: "Tests with code coverage"
        runs-on: "${{ matrix.operating-system }}"

        strategy:
            matrix:
                php-version: ["7.4"]
                operating-system: ["ubuntu-latest"]

        if: "github.event_name == 'push'"

        steps:
            -   name: "Check if other steps should be executed"
                uses: "actions/github-script@v3"
                id: "should-run"
                with:
                    github-token: "${{ secrets.GITHUB_TOKEN }}"
                    result-encoding: "string"
                    script: |
                        result = await github.repos.get({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                        })
                        ref = 'refs/heads/' + result.data.default_branch;
                        return ref === context.ref ? 'yes' : 'no';

            -   name: "Checkout"
                if: "${{ steps.should-run.outputs.result == 'yes' }}"
                uses: "actions/checkout@v2"

            -   name: "Setup PHP cache environment"
                if: "${{ steps.should-run.outputs.result == 'yes' }}"
                id: "extcache"
                uses: "shivammathur/cache-extensions@v1"
                with:
                    php-version: "${{ matrix.php-version }}"
                    extensions: "${{ env.php-extensions }}"
                    key: "${{ env.php-extensions }}"

            -   name: "Cache PHP extensions"
                if: "${{ steps.should-run.outputs.result == 'yes' }}"
                uses: "actions/cache@v2"
                with:
                    path: "${{ steps.extcache.outputs.dir }}"
                    key: "${{ steps.extcache.outputs.key }}"
                    restore-keys: "${{ steps.extcache.outputs.key }}"

            -   name: "Install PHP"
                if: "${{ steps.should-run.outputs.result == 'yes' }}"
                uses: "shivammathur/setup-php@v2"
                with:
                    php-version: "${{ matrix.php-version }}"
                    extensions: "${{ env.php-extensions }}"
                    tools: "${{ env.php-tools }}"

            -   name: "Setup problem matchers for PHP"
                if: "${{ steps.should-run.outputs.result == 'yes' }}"
                run: 'echo "::add-matcher::${{ runner.tool_cache }}/php.json"'

            -   name: "Get Composer cache directory"
                if: "${{ steps.should-run.outputs.result == 'yes' }}"
                id: "composercache"
                run: 'echo "::set-output name=dir::$(composer config cache-files-dir)"'

            -   name: "Cache PHP dependencies"
                if: "${{ steps.should-run.outputs.result == 'yes' }}"
                uses: "actions/cache@v2"
                with:
                    path: "${{ steps.composercache.outputs.dir }}"
                    key: "${{ runner.os }}-composer-${{  hashFiles('**/composer.json', '**/composer.lock') }}"
                    restore-keys: "${{ runner.os }}-composer-"

            -   name: "Install dependencies"
                if: "${{ steps.should-run.outputs.result == 'yes' }}"
                run: "composer update --no-interaction --no-progress --prefer-dist --prefer-stable"

            -   name: "Setup problem matchers for PHPUnit"
                if: "${{ steps.should-run.outputs.result == 'yes' }}"
                run: 'echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"'

            -   name: "Tests"
                if: "${{ steps.should-run.outputs.result == 'yes' }}"
                run: "make coverage-clover"

            -   name: "Coveralls.io"
                if: "${{ steps.should-run.outputs.result == 'yes' }}"
                env:
                    CI_NAME: "github"
                    CI: true
                    COVERALLS_REPO_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
                run: |
                    wget https://github.com/php-coveralls/php-coveralls/releases/download/v2.2.0/php-coveralls.phar
                    php php-coveralls.phar --verbose --config build/.coveralls.yml
